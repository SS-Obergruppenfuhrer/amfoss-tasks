import 'package:flutter/material.dart';
import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Location Picker App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LocationPickerPage(),
    );
  }
}

class LocationPickerPage extends StatefulWidget {
  @override
  _LocationPickerPageState createState() => _LocationPickerPageState();
}

class _LocationPickerPageState extends State<LocationPickerPage> {
  final MapController mapController = MapController(
    initPosition: GeoPoint(latitude: 17.674106, longitude: 83.274797),
  );

  late GeoPoint pickedLocation =
      GeoPoint(latitude: 17.674106, longitude: 83.274797);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Location Picker'),
      ),
      body: Column(
        children: [
          Expanded(
            child: OSMFlutter(
              controller: mapController,
              osmOption: OSMOption(
                userTrackingOption: UserTrackingOption(
                  enableTracking: true,
                  unFollowUser: false,
                ),
                zoomOption: ZoomOption(
                  initZoom: 8,
                  minZoomLevel: 3,
                  maxZoomLevel: 19,
                  stepZoom: 1.0,
                ),
                userLocationMarker: UserLocationMaker(
                  personMarker: MarkerIcon(
                    icon: Icon(
                      Icons.location_history_rounded,
                      color: Colors.red,
                      size: 48,
                    ),
                  ),
                  directionArrowMarker: MarkerIcon(
                    icon: Icon(
                      Icons.double_arrow,
                      size: 48,
                    ),
                  ),
                ),
                roadConfiguration: RoadOption(
                  roadColor: Colors.yellowAccent,
                ),
                markerOption: MarkerOption(
                  defaultMarker: MarkerIcon(
                    icon: Icon(
                      Icons.person_pin_circle,
                      color: Colors.blue,
                      size: 56,
                    ),
                  ),
                ),
              ),
              onLocationChanged: (GeoPoint geoPoint) {
                setState(() {
                  pickedLocation = geoPoint;
                });
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
              onPressed: () {
                _calculateDistanceAndShowDialog();
              },
              child: Text('Calculate Distance to Pinned Location'),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _calculateDistanceAndShowDialog() async {
    GeoPoint userLocation = await mapController.myLocation();

    RoadInfo roadInfo = await mapController.drawRoad(
      userLocation,
      pickedLocation,
      roadType: RoadType.car,
    );

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Distance and Time'),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Distance: ${roadInfo.distance} km'),
              Text('Duration: ${roadInfo.duration} sec'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }
}

